//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument
//file:noinspection GrUnresolvedAccess
plugins {
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20-Beta2'
}

group = 'io.github.liyze09'
version = '3.0-beta'

repositories {
    maven {
        url "https://maven.aliyun.com/repository/public"
    }
    maven {
        url "https://maven.aliyun.com/repository/gradle-plugin"
    }
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    compileOnly 'org.jetbrains:annotations:24.0.1'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    api 'org.slf4j:slf4j-api:2.0.9'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    runtimeOnly 'ch.qos.logback:logback-classic:1.4.11'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    api 'com.google.guava:guava:32.1.2-jre'
    // https://mvnrepository.com/artifact/org.smartboot.http/smart-http-server
    api 'org.smartboot.http:smart-http-server:1.3.0'
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    api 'com.squareup.okhttp3:okhttp:4.11.0'
    // https://mvnrepository.com/artifact/org.smartboot.socket/aio-pro
    api 'org.smartboot.socket:aio-pro:1.6.5'
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    api 'com.zaxxer:HikariCP:5.0.1'
    // https://mvnrepository.com/artifact/com.ibeetl/beetl
    api 'com.ibeetl:beetl:3.15.8.RELEASE'
    // https://mvnrepository.com/artifact/org.furyio/fury-core
    api 'org.furyio:fury-core:0.1.1'
    implementation 'org.graalvm.polyglot:polyglot:23.1.0'
    implementation 'org.graalvm.polyglot:js-community:23.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}
test {
    useJUnitPlatform()
}
sourceSets{
    java
}
jar{
    from("LICENSE")
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Main-Class': 'net.liyze.basin.core.Basin'
        attributes 'Created-By': 'Gradle 8'
        attributes 'Built-By': 'Liyze09'
        attributes 'Build-Jdk': Runtime.version().toString()
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
javadoc {
    failOnError false
}
java {
    if (System.getenv("CI") != null) {
        withJavadocJar()
    }
    withSourcesJar()
}
kotlin {
    jvmToolchain(21)
}
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'Basin'
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
            }
            pom {
                name = 'basin'
                description = 'Basin'
                url = 'https://github.com/Liyze09/Basin'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/'
                    }
                }
                developers {
                    developer {
                        id = 'Liyze09'
                        name = 'Yuze Li'
                        email = 'a52990419@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Liyze09/Basin.git'
                    developerConnection = 'scm:git:ssh://github.com/Liyze09/Basin.git'
                    url = 'https://github.com/Liyze09/Basin'
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = findProperty("OSSRH_USERNAME") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("OSSEH_PASSWORD") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}
signing {
    sign(publishing.publications.maven)
}
