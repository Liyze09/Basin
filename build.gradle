//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'java'
}

group = 'net.liyze'
version = '1.0-SNAPSHOT'

repositories {
    maven {
        url "https://maven.aliyun.com/repository/public"
    }
    maven {
        url "https://maven.aliyun.com/repository/gradle-plugin"
    }
    mavenCentral()
}

dependencies {
    //https://mvnrepository.com/artifact/org.jetbrains/annotations
    implementation 'org.jetbrains:annotations:24.0.1'
    //https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.7'
    //https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation 'ch.qos.logback:logback-classic:1.4.7'
    //https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    //https://mvnrepository.com/artifact/org.smartboot.http/smart-http-server
    implementation 'org.smartboot.http:smart-http-server:1.2.1'
    //https://mvnrepository.com/artifact/com.moandjiezana.toml/toml4j
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    //https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'
    //https://mvnrepository.com/artifact/org.smartboot.socket/aio-pro
    implementation 'org.smartboot.socket:aio-pro:1.5.29'
}
test {

}
sourceSets{
    java
}
jar{
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from("LICENSE")
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Main-Class': 'net.liyze.basin.core.Main'
        attributes 'Class-Path': 'data/jars'
        attributes 'Created-By': 'Gradle 8'
        attributes 'Built-By': 'Liyze09'
        attributes 'Build-Jdk': Runtime.version().toString()
        attributes 'Export-Command': 'net.liyze.basin.core.InternalPluginDemo'
        attributes 'Boot-Class': 'net.liyze.basin.core.InternalPluginDemo'
    }
    exclude 'META-INF/versions/**'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/INDEX.LIST'
    exclude 'module-info.class'
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}